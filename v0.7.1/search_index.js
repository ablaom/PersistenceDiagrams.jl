var documenterSearchIndex = {"docs":
[{"location":"api/#Persistence-Intervals-and-Diagrams","page":"API","title":"Persistence Intervals and Diagrams","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"PersistenceInterval","category":"page"},{"location":"api/#PersistenceDiagrams.PersistenceInterval","page":"API","title":"PersistenceDiagrams.PersistenceInterval","text":"PersistenceInterval\n\nThe type that represents a persistence interval. It behaves exactly like a Tuple{Float64, Float64}, but can have meta data attached to it. The metadata is accessible with getproperty.\n\nExample\n\njulia> int = PersistenceInterval(1, Inf, meta1=:a, meta2=:b)\n[1.0, ∞) with:\n meta1: Symbol\n meta2: Symbol\n\njulia> birth(int), death(int), persistence(int)\n(1.0, Inf, Inf)\n\njulia> isfinite(int)\nfalse\n\njulia> propertynames(int)\n(:meta1, :meta2)\n\njulia> int.meta1\n:a\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"birth","category":"page"},{"location":"api/#PersistenceDiagrams.birth","page":"API","title":"PersistenceDiagrams.birth","text":"birth(interval)\n\nGet the birth time of interval.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"death","category":"page"},{"location":"api/#PersistenceDiagrams.death","page":"API","title":"PersistenceDiagrams.death","text":"death(interval)\n\nGet the death time of interval.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"persistence","category":"page"},{"location":"api/#PersistenceDiagrams.persistence","page":"API","title":"PersistenceDiagrams.persistence","text":"persistence(interval)\n\nGet the persistence of interval, which is equal to death - birth.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"representative","category":"page"},{"location":"api/#PersistenceDiagrams.representative","page":"API","title":"PersistenceDiagrams.representative","text":"representative(interval::PersistenceInterval)\n\nGet the representative (co)cycle attached to interval, if it has one.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"birth_simplex","category":"page"},{"location":"api/#PersistenceDiagrams.birth_simplex","page":"API","title":"PersistenceDiagrams.birth_simplex","text":"birth_simplex(interval::PersistenceInterval)\n\nGet the critical birth simplex of interval, if it has one.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"death_simplex","category":"page"},{"location":"api/#PersistenceDiagrams.death_simplex","page":"API","title":"PersistenceDiagrams.death_simplex","text":"death_simplex(interval::PersistenceInterval)\n\nGet the critical death simplex of interval, if it has one.\n\nNote: an infinite interval's death simplex is nothing.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"PersistenceDiagram","category":"page"},{"location":"api/#PersistenceDiagrams.PersistenceDiagram","page":"API","title":"PersistenceDiagrams.PersistenceDiagram","text":"PersistenceDiagram{P<:PersistenceInterval} <: AbstractVector{P}\n\nType for representing persistence diagrams. Behaves exactly like an array of PersistenceIntervals, but is can have metadata attached to it and supports pretty printing and plotting.\n\nExample\n\njulia> diag = PersistenceDiagram(\n    [(1, 3), (3, 4), (1, Inf)], [(;a=1), (;a=2), (;a=3)], dim=1, meta1=:a\n)\n3-element 1-dimensional PersistenceDiagram:\n [1.0, 3.0)\n [3.0, 4.0)\n [1.0, ∞)\n\njulia> diag[1]\n[1.0, 3.0) with:\n  a: Int64\n\njulia> diag[1].a\n[1.0, 3.0) with:\n  1\n\njulia> sort(diag, by=persistence, rev=true)\n3-element 1-dimensional PersistenceDiagram:\n [1.0, ∞)\n [1.0, 3.0)\n [3.0, 4.0)\n\njulia> propertynames(diag)\n(:dim, :meta1)\n\njulia> dim(diag)\n1\n\njulia> diag.meta1\n:a\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"barcode(::Union{PersistenceDiagram, AbstractVector{<:PersistenceDiagram}})","category":"page"},{"location":"api/#PersistenceDiagrams.barcode-Tuple{Union{AbstractArray{var\"#s12\",1} where var\"#s12\"<:PersistenceDiagram, PersistenceDiagram}}","page":"API","title":"PersistenceDiagrams.barcode","text":"barcode(diagram)\n\nPlot the barcode plot of persistence diagram or multiple diagrams diagrams. The infinity keyword argument determines where the infinity line is placed. If unset, the function tries to use threshold(diagram) or guess a good position to place the line at.\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances-Between-Persistence-Diagrams","page":"API","title":"Distances Between Persistence Diagrams","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Bottleneck","category":"page"},{"location":"api/#PersistenceDiagrams.Bottleneck","page":"API","title":"PersistenceDiagrams.Bottleneck","text":"Bottleneck\n\nUse this object to find the bottleneck distance or matching between persistence diagrams. The distance value is equal to\n\nW_infty(X Y) = inf_etaXrightarrow Y sup_xin X x-eta(x)_infty\n\nwhere X and Y are the persistence diagrams and eta is a perfect matching between the intervals. Note the X and Y don't need to have the same number of points, as the diagonal points are considered in the matching as well.\n\nWarning\n\nComputing the bottleneck distance requires mathcalO(n^2) space. Be careful when computing distances between very large diagrams!\n\nUsage\n\nBottleneck()(left, right[; matching=false]): find the bottleneck matching (if matching=true) or distance (if matching=false) between persistence diagrams left and right\n\nExample\n\nleft = PersistenceDiagram([(1.0, 2.0), (5.0, 8.0)])\nright = PersistenceDiagram([(1.0, 2.0), (3.0, 4.0), (5.0, 10.0)])\nBottleneck()(left, right)\n\n# output\n\n2.0\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"Wasserstein","category":"page"},{"location":"api/#PersistenceDiagrams.Wasserstein","page":"API","title":"PersistenceDiagrams.Wasserstein","text":"Wasserstein(q=1)\n\nUse this object to find the Wasserstein distance or matching between persistence diagrams. The distance value is equal to\n\nW_q(XY)=leftinf_etaXrightarrow Ysum_xin Xx-eta(x)_infty^qright\n\nwhere X and Y are the persistence diagrams and eta is a perfect matching between the intervals. Note the X and Y don't need to have the same number of points, as the diagonal points are considered in the matching as well.\n\nWarning\n\nComputing the Wasserstein distance requires mathcalO(n^2) space. Be careful when computing distances between very large diagrams!\n\nUsage\n\nWasserstein(q=1)(left, right[; matching=false]): find the Wasserstein matching (if matching=true) or distance (if matching=false) between persistence diagrams left and right.\n\nExample\n\nleft = PersistenceDiagram([(1.0, 2.0), (5.0, 8.0)])\nright = PersistenceDiagram([(1.0, 2.0), (3.0, 4.0), (5.0, 10.0)])\nWasserstein()(left, right)\n\n# output\n\n3.0\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"matching","category":"page"},{"location":"api/#PersistenceDiagrams.matching","page":"API","title":"PersistenceDiagrams.matching","text":"matching(::MatchingDistance, left, right)\nmatching(::Matching)\n\nGet the matching between persistence diagrams left and right.\n\nSee also\n\nmatching\nBottleneck\nWasserstein\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"weight","category":"page"},{"location":"api/#PersistenceDiagrams.weight","page":"API","title":"PersistenceDiagrams.weight","text":"weight(::MatchingDistance, left, right)\nweight(::Matching)\n\nGet the weight of the matching between persistence diagrams left and right.\n\nSee also\n\nmatching\nBottleneck\nWasserstein\n\n\n\n\n\n","category":"function"},{"location":"api/#Persistence-Diagram-Vectorization","page":"API","title":"Persistence Diagram Vectorization","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"PersistenceImage","category":"page"},{"location":"api/#PersistenceDiagrams.PersistenceImage","page":"API","title":"PersistenceDiagrams.PersistenceImage","text":"PersistenceImage\n\nPersistenceImage provides a vectorization method for persistence diagrams. Each point in the diagram is first transformed into birth, persistence coordinates. Then, it is weighted by a weighting function and widened by a distribution (default: gaussian with σ=1). Once all the points are transformed, their distributions are summed together and discretized into an image.\n\nThe weighting ensures points near the diagonal have a small contribution. This ensures this representation of the diagram is stable.\n\nOnce a PersistenceImage is constructed (see below), it can called like a function to transform a diagram to an image.\n\nInfinite intervals in the diagram are ignored.\n\nConstructors\n\nPersistenceImage(ylims, xlims; size=5, kwargs...)\nPersistenceImage(diagrams; size=5, kwargs...)\n\nArguments\n\nylims, xlims: Limits of the square on which the image is created, both 2-tuples. Note that y comes first as this is the way arrays are indexed.\ndiagrams: Collection of persistence diagrams. This constructor sets ylims and xlims according to minimum and maximum birth time and persistence time. Sets slope_end to maximum persistence time.\n\nKeyword Arguments\n\ndistribution: A function or callable object used to smear each interval in diagram.  Has to be callable with two Float64s as input and should return a Float64. Defaults to a normal distribution with sigma equal to 1.\nsigma: The width of the gaussian distribution. Only applicable when distribution is unset.\nweight: A function or callable object used as the weighting function. Has to be callable with two Float64s as input and should return a Float64. Should equal 0.0 for x=0, but this is not enforced.\nslope_end: the y value at which the default weight function stops increasing.\nsize: integer or tuple of two integers. Determines the size of the array containing the image. Defaults to 5.\n\nExample\n\ndiag_1 = PersistenceDiagram(0, [(0, 1), (0, 1.5), (1, 2)])\ndiag_2 = PersistenceDiagram(0, [(1, 2), (1, 1.5)])\nimage = PersistenceImage([diag_1, diag_2])\n\n# output\n\n5×5 PersistenceImage(\n  distribution = PersistenceDiagrams.Binormal(1.0),\n  weight = PersistenceDiagrams.DefaultWeightingFunction(1.5)\n)\n\nimage(diag_1)\n\n# output\n\n5×5 Array{Float64,2}:\n 0.266562  0.269891  0.264744  0.251762  0.232227\n 0.294472  0.297554  0.291244  0.276314  0.254244\n 0.31342   0.316057  0.308664  0.292136  0.268117\n 0.32141   0.323446  0.315164  0.297554  0.272373\n 0.31758   0.318928  0.310047  0.29199   0.266562\n\nReference\n\nAdams, H., Emerson, T., Kirby, M., Neville, R., Peterson, C., Shipman, P., ... & Ziegelmeier, L. (2017). Persistence images: A stable vector representation of persistent homology. The Journal of Machine Learning Research, 18(1), 218-252.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"PersistenceCurve","category":"page"},{"location":"api/#PersistenceDiagrams.PersistenceCurve","page":"API","title":"PersistenceDiagrams.PersistenceCurve","text":"PersistenceCurves\n\nPersistence curves offer a general way to transform a persistence diagram into a vector of numbers.\n\nThis is done by first splitting the time domain into buckets. Then the intervals contained in the bucket are collected and transformed by applying fun to each of them. The result is then summarized with the stat function. If an interval is only parially contained in a bucket, it is counted partially.\n\nOnce a PersistenceCurve is constructed (see below), it can be called to convert a persistence diagram to a vector of floats.\n\nConstructors\n\nPersistenceCurve(fun, stat, start, stop; length=10, integrate=true, normalize=false): length buckets with the first strating on t_start and the last ending on t_end.\nPersistenceCurve(fun, stat, diagrams; length=10, integreate=true, normalize=false): learn the start and stop parameters from a collection of persistence diagrams.\n\nKeyword arguments\n\nlength: the length of the output. Defaults to 10.\nfun: the function applied to each interval. Must have the following signature. fun(::AbstractPersistenceInterval, ::PersistenceDiagram, time)::T\nstat: the summary function applied the results of fun. Must have the following signature. stat(::Vector{T})::Float64\nnormalize: if set to true, normalize the result. Does not work for time-dependent funs. Defaults to false. Normalization is performed by dividing all values by stat(fun.(diag)).\nintegrate: if set to true, the amount of overlap between an interval and a bucket is considered. This prevents missing very small bars, but does not work correctly for curves with time-dependent funs where stat is a selection function (such as landscapes). If set to false, the curve is simply sampled at midpoints of buckets. Defaults to true.\n\nCall\n\n(::PersistenceCurve)(diagram; normalize, integrate)\n\nTransforms a diagram. normalize and integrate override defaults set in constructor.\n\nExample\n\ndiagram = PersistenceDiagram(0, [(0, 1), (0.5, 1), (0.5, 0.6), (1, 1.5), (0.5, Inf)])\ncurve = BettiCurve(0, 2, length = 4)\ncurve(diagram)\n\n# output\n\n4-element Array{Float64,1}:\n 1.0\n 3.2\n 2.0\n 1.0\n\nSee Also\n\nThe following are equivalent to PersistenceCurve with appropriately selected fun and stat arguments.\n\nBettiCurve\nLandscape\nSilhuette\nLife\nMidlife\nLifeEntropy\nMidlifeEntropy\nPDThresholding\n\nMore options listed in Table 1 on page 9 of reference.\n\nReference\n\nChung, Y. M., & Lawson, A. (2019). Persistence curves: A canonical framework for summarizing persistence diagrams. arXiv preprint arXiv:1904.07768.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"BettiCurve","category":"page"},{"location":"api/#PersistenceDiagrams.BettiCurve","page":"API","title":"PersistenceDiagrams.BettiCurve","text":"BettiCurve\n\nBetti curves count the Betti numbers at each time step. Unlike most vectorization methods, they support infinite intervals.\n\nfun(_, _, _) = 1.0\nstat = sum\n\nSee also\n\nPersistenceCurve\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Landscape","category":"page"},{"location":"api/#PersistenceDiagrams.Landscape","page":"API","title":"PersistenceDiagrams.Landscape","text":"Landscape(k, args...)\n\nThe k-th persistence landscape.\n\nfun((b, d), _, t) = max(min(t - b, d - t), 0)\nstat = get(sort(values, rev=true), k, 0.0)\n\nSee also\n\nPersistenceCurve\n\nReference\n\nBubenik, P. (2015). Statistical topological data analysis using persistence landscapes. The Journal of Machine Learning Research, 16(1), 77-102.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Silhuette","category":"page"},{"location":"api/#PersistenceDiagrams.Silhuette","page":"API","title":"PersistenceDiagrams.Silhuette","text":"Silhuette\n\nThe sum of persistence landscapes for all values of k.\n\nfun((b, d), _, t) = max(min(t - b, d - t), 0)\nstat = sum\n\nSee also\n\nPersistenceCurve Landscape\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Life","category":"page"},{"location":"api/#PersistenceDiagrams.Life","page":"API","title":"PersistenceDiagrams.Life","text":"Life\n\nThe life curve.\n\nfun((b, d), _, _) = d - b\nstat = sum\n\nSee also\n\nPersistenceCurve\n\nReference\n\nChung, Y. M., & Lawson, A. (2019). Persistence curves: A canonical framework for summarizing persistence diagrams. arXiv preprint arXiv:1904.07768.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Midlife","category":"page"},{"location":"api/#PersistenceDiagrams.Midlife","page":"API","title":"PersistenceDiagrams.Midlife","text":"Midlife\n\nThe midlife curve.\n\nfun((b, d), _, _) = (b + d) / 2\nstat = sum\n\nSee also\n\nPersistenceCurve\n\nReference\n\nChung, Y. M., & Lawson, A. (2019). Persistence curves: A canonical framework for summarizing persistence diagrams. arXiv preprint arXiv:1904.07768.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"LifeEntropy","category":"page"},{"location":"api/#PersistenceDiagrams.LifeEntropy","page":"API","title":"PersistenceDiagrams.LifeEntropy","text":"LifeEntropy\n\nThe life entropy curve.\n\nfun((b, d), diag, _) = begin\n    x = (d - b) / sum(d - b for (b, d) in diag)\n    -x * log2(x)\nend\nstat = sum\n\nSee also\n\nPersistenceCurve\n\nReference\n\nAtienza, N., González-Díaz, R., & Soriano-Trigueros, M. (2018). On the stability of persistent entropy and new summary functions for TDA. arXiv preprint arXiv:1803.08304.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"MidlifeEntropy","category":"page"},{"location":"api/#PersistenceDiagrams.MidlifeEntropy","page":"API","title":"PersistenceDiagrams.MidlifeEntropy","text":"MidlifeEntropy\n\nThe midlife entropy curve.\n\nfun((b, d), diag, _) = begin\n    x = (b + d) / sum(b + d for (d, b) in diag)\n    -x * log2(x)\nend\nstat = sum\n\nSee also\n\nPersistenceCurve\n\nReference\n\nChung, Y. M., & Lawson, A. (2019). Persistence curves: A canonical framework for summarizing persistence diagrams. arXiv preprint arXiv:1904.07768.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"PDThresholding","category":"page"},{"location":"api/#PersistenceDiagrams.PDThresholding","page":"API","title":"PersistenceDiagrams.PDThresholding","text":"PDThresholding\n\nThe persistence diagram thresholding function.\n\nfun((b, d), _, t) = (d - t) * (t - b)\nstat = mean\n\nSee also\n\nPersistenceCurve\n\nReference\n\nChung, Y. M., & Day, S. (2018). Topological fidelity and image thresholding: A persistent homology approach. Journal of Mathematical Imaging and Vision, 60(7), 1167-1179.\n\n\n\n\n\n","category":"function"},{"location":"#PersistenceDiagrams.jl","page":"Home","title":"PersistenceDiagrams.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides the PersistenceInterval and PersistenceDiagram types as well as some functions for working with them. If you want to compute persistence diagrams, please see Ripserer.jl. For examples and tutorials, see the Ripserer.jl docs.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package currently supports the following.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Persistence diagram plotting.\nBottleneck and Wasserstein matching and distance computation.\nPersistence images.\nVarious persistence curves (see API for full list).","category":"page"}]
}
